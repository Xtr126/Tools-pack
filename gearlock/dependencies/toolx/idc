#!/gearlock/bin/bash

device_names="$(cat /proc/bus/input/devices | grep "N: Name" | awk '{$1=""}1')"

input_devices=()

i=0

while read -r line; do # process file by file
    eval "$line"
    let i=$i+1
    input_devices+=("$Name" $i)

done < <( echo "$device_names" )
    HEIGHT=0
	WIDTH=60
	CHOICE_HEIGHT=0
	BACKTITLE=$(gecpc "By Xtr" "+")
	TITLE="Input device configurator"
	MENU="Select your touchpad to configure"
	CHOICE=$(dialog --clear --cancel-label "Exit" \
	                --backtitle "$BACKTITLE" \
                    --title "$TITLE" \
	                --menu "$MENU" \
	                $HEIGHT $WIDTH $CHOICE_HEIGHT \
	                "${input_devices[@]}" \
	                2>&1 >/dev/tty)
	
	idc_name=${CHOICE//[^a-zA-Z0-9-_]/_}.idc
	dialog --msgbox "This configuration file will be saved in
	/system/usr/idc/${idc_name}" 7 45
	WIDTH=80
	OPTIONS=( touchScreen "touch screen associated with a display, can be used for games"
				touchPad "touch pad not associated with a display."
				pointer "motions are used for indirect multi-touch pointer gestures."
				default "system automatically detects the device type" )
	
		MENU="specify the touch device type"
	CHOICE=$(dialog --clear --cancel-label "Exit" \
	                --backtitle "$BACKTITLE" \
                    --title "$TITLE" \
	                --menu "$MENU" \
	                $HEIGHT $WIDTH $CHOICE_HEIGHT \
	                "${OPTIONS[@]}" \
	                2>&1 >/dev/tty)
				WIDTH=60
		
		echo "touch.deviceType = ${CHOICE}" > /system/usr/idc/${idc_name}

		if (dialog --yesno "the touch device should react to display orientation changes?" 7 45); then
				echo "touch.orientationAware = 1" >> /system/usr/idc/${idc_name}
            else
                echo "touch.orientationAware = 0" >> /system/usr/idc/${idc_name}
        fi

		if (dialog --title "specify touch.gestureMode" \
		--yes-label "pointer" \
		--no-label "spots" \
		--yesno "If the value is pointer, the touch pad gestures are presented by way of a cursor similar to a mouse pointer.

    If the value is spots, the touch pad gestures are presented by an anchor that represents the centroid of the gesture and a set of circular spots that represent the position of individual fingers." 11 60); then
				echo "touch.gestureMode = pointer" >> /system/usr/idc/${idc_name}
            else
                echo "touch.gestureMode = spots" >> /system/usr/idc/${idc_name}
        fi

		if (dialog --title "specify device.internal" \
		--yes-label "internal" \
		--no-label "external" \
		--yesno "the input device should behave like an internal built-in component or external?
		Internal input devices generally do not wake the display from sleep
		i recommend to choose external" 10 60); then
				echo "device.internal = 1" >> /system/usr/idc/${idc_name}
            else
                echo "device.internal = 0" >> /system/usr/idc/${idc_name}
        fi

dialog --title "touch.size.calibration" \
		--ok-label "none" \
		--cancel-label "geometric" \
		--help-button --help-label "diameter" \
		--extra-button --extra-label "area" \
		--yesno \
		"Specify the kind of measurement used by the touch driver to report the touch size and tool size.
none- the size is set to zero.
geometric- the size is assumed to be specified in the same surface units as the position, so it is scaled in the same manner.
diameter- the size is assumed to be proportional to the diameter (width) of the touch or tool.
area- the size is assumed to be proportional to the area of the touch or tool." 15 60

		case $? in

			0)echo "touch.size.calibration = none" >> /system/usr/idc/${idc_name};;

			1)echo "touch.size.calibration = geometric" >> /system/usr/idc/${idc_name};;

			2)echo "touch.size.calibration = diameter" >> /system/usr/idc/${idc_name};;

			3)echo "touch.size.calibration = area" >> /system/usr/idc/${idc_name};;

			*);;

		esac


		if (dialog --title "Apply changes" \
		--yes-label "Reload module" \
		--no-label "Manual reboot" \
		--yesno "If you know the kernel module your touchpad uses ( might be psmouse, hid-multitouch, i2c_hid or something like that) then you can reload the kernel module to apply changes (experimental) or just manually reboot" 10 55); then
				
								
				OPTIONS=( $( lsmod | awk '{print $1}') )
				    HEIGHT=20
					WIDTH=45
					CHOICE_HEIGHT=20
				MENU="select kernel module to unload and reload"
				CHOICE=$(dialog --clear --no-items --cancel-label "Exit" \
								--backtitle "$BACKTITLE" \
								--title "$TITLE" \
								--menu "$MENU" \
								$HEIGHT $WIDTH $CHOICE_HEIGHT \
								"${OPTIONS[@]}" \
								2>&1 >/dev/tty)

					
					rmmod ${CHOICE} && modprobe ${CHOICE}
					exit

            else
				exit
        fi
			